import { Markup, type Telegraf } from 'telegraf'
import { Command } from '../Command'
import { type ILogger } from '../../logger'
import { type IApi } from '../../services/api'

export class StartCommand extends Command {
  constructor (bot: Telegraf, logger: ILogger, api: IApi) {
    super(bot, logger, api)
  }

  handle (): void {
    // –°—Ç–∞—Ä—Ç
    this.bot.start(async (ctx) => {
      this.logger.logAction('–°—Ç–∞—Ä—Ç', ctx.update.message.from)

      const name = ctx.update.message.from.first_name
      try {
        await ctx.replyWithPhoto(
          'https://i.ibb.co/4jk1tyM/1.png',
          {
            caption: `*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}*` + '\n \n' +
                'üëæ C —ç—Ç–æ–π –º–∏–Ω—É—Ç—ã —Ç—ã, —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–≤–æ—è –∂–∏–∑–Ω—å –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–∂–Ω–µ–π' + '\n \n' +
                '–¢—ã –ø–æ–ø–∞–ª –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç:' + '\n \n' +
                '\‚Äî –ü–æ–≤—ã—Å–∏—Ç—å —á–µ–∫ –Ω–∞ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏' + '\n' +
                '\‚Äî –ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç 150 —Ç—ã—Å' + '\n' +
                '\‚Äî –ò–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º' + '\n' +
                '\‚Äî –ò–º–µ—Ç—å –∫–ª–∞—Å—Å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ' + '\n \n' +
                '–ú–æ–∂–Ω–æ –µ—â–µ –º–Ω–æ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å, –Ω–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —É–ª—É—á–∏—à—å —Å–≤–æ—é –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏',
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏', 'open_functions')
            ])
          }
        )
      } catch (e) {
        this.logger.log('error in start', 'error')
      }
    })

    // –û—Ç–∫—Ä—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    this.bot.action('open_functions', async (ctx) => {
      this.logger.logAction('–û—Ç–∫—Ä—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏', ctx.from)

      try {
        await ctx.replyWithPhoto(
          'https://i.ibb.co/68xZ109/2.png',
          {
            caption: '*–ù–∞ —Å–≤—è–∑–∏ DesignBot*' + '\n \n' +
                   '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏' + '\n \n' +
                   'üéÅ –¢–æ–ª—å–∫–æ —Ç—Å—Å\\.\\.\\. –¥–∞–≤–∞–π –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —è –¥–∞—é —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ 1 —Ä–∞–∑—É, –∞ –≤–∑–∞–º–µ–Ω –ø–æ–ª—É—á–∞—é –æ—Ç —Ç–µ–±—è –ø–æ–¥–ø–∏—Å–∫—É' + '\n \n' +
                   'üíú –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–ª—É—á—à–∏—Ç –º–µ–Ω—è –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç —Ç–µ–±–µ –∫—É—á—É –¥–µ–Ω–µ–≥ –∏ —Å–∏–ª',
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'get_gift')
            ])
          }
        )

        await ctx.reply('‚ÜòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', Markup.keyboard([
          ['üì• –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª'],
          ['üíé –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø'],
          ['üîê –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ']
        ]).resize())
      } catch (e) {
        this.logger.log(`error in open functions: ${e}`, 'error')
      }
    })

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
    this.bot.action('get_gift', async (ctx) => {
      this.logger.logAction('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', ctx.from)

      try {
        await ctx.editMessageMedia({
          media: 'https://i.ibb.co/Hq2VBvt/3.png',
          type: 'photo',
          caption: '*–û—Ç–ª–∏—á–Ω–æ\\! üéâ*' + '\n \n' +
              '–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç \\- –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∂–¥—É—é –º–æ—é —Ñ—É–Ω–∫—Ü–∏—é 1 —Ä–∞–∑' + '\n \n' +
              'üëæ –ë—É–¥—É —Ä–∞–¥ –æ–∫–∞–∑–∞—Ç—å –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä—É—Ç–æ' + '\n \n' +
              '\\*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞',
          parse_mode: 'MarkdownV2'
        })
      } catch (e) {
        this.logger.log(`error in get gift: ${e}', 'error`)
      }
    })
  }
}
