import { Context, Markup, Telegraf } from "telegraf";
import { Command } from "../Command";
import { ILogger } from "../../logger";
import { services, data } from "./constants";

export class Files extends Command {
    constructor(bot: Telegraf, logger: ILogger) {
        super(bot, logger);
    }

    servicesButtons() {
        return [ 
            [
                Markup.button.callback('UI8NET', services.ui8net),
                Markup.button.callback('CRAFTWORK', services.craftwork)
            ],
            [
                Markup.button.callback('LS. Graphics', services.ls_graphics),
                Markup.button.callback('UIHUNT', services.uihunt)
            ],
            [
                Markup.button.callback('Pixsellz', services.pixsellz),
                Markup.button.callback('Spline.one', services.spline),
            ],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu')]
          ]
    }

    async selectServices(ctx: Context) {
        await ctx.replyWithPhoto(
            "https://i.ibb.co/bJkm6w4/4.png",
             {
               caption: `*‚ö°Ô∏è –¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Ñ–∞–π–ª \\- –±–µ—Å–ø–ª–∞—Ç–Ω–æ*` + "\n \n" +
               '*–û–±—â–∞—è —Å—É–º–º–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 150\\.000$*' + "\n \n" +
               '1\\) –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª' + "\n \n" +
               '2\\) –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–∞–π–¥–∏ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª' + "\n \n" +
               '3\\) –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏ –≤—Å—Ç–∞–≤—å –≤ –±–æ—Ç–∞' + "\n \n" +
               '4\\) –ì–æ—Ç–æ–≤–æ\\! –±–æ—Ç –≤—ã—à–ª–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ',
               parse_mode: 'MarkdownV2',
               reply_markup: {
                inline_keyboard: this.servicesButtons()
               }
            }
       )
    }

    handle(): void {
        this.bot.hears('üì• –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª', async (ctx) => {
            this.logger.logAction('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª', ctx.from)
    
            await ctx.deleteMessage();
            await this.selectServices(ctx)
        })

        this.bot.action([
            services.ui8net,
            services.craftwork,
            services.ls_graphics,
            services.uihunt,
            services.pixsellz,
            services.spline,
        ], async (ctx) => {
            const serviceName = ctx.match[0];
            this.logger.logAction(serviceName, ctx.from)

            const info = data[serviceName];

            if(!info) {
                this.logger.log('Info not search', 'error')
            }
            
            await ctx.editMessageMedia({
                media: info.image,
                type: 'photo',
                caption: `*–¢—ã –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–∏—Å ${info.title}*` + "\n \n" +
                `[–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç](${info.url}) –∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É —Ñ–∞–π–ª–∞` + "\n \n" +
                'üìÑ –î–∞–ª–µ–µ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç –±–æ—Ç–∞ –∏ –ø–æ—à–ª–∏ –µ–µ',
                parse_mode: 'MarkdownV2',
            })

            await ctx.editMessageReplyMarkup({
                inline_keyboard: [
                  [Markup.button.callback('‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å', 'select_services')]
                ],
            });
        })

        this.bot.action('select_services', async (ctx) => {
            await ctx.editMessageMedia({
                media: "https://i.ibb.co/bJkm6w4/4.png",
                type: 'photo',
                caption: `*‚ö°Ô∏è –¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Ñ–∞–π–ª \\- –±–µ—Å–ø–ª–∞—Ç–Ω–æ*` + "\n \n" +
                '*–û–±—â–∞—è —Å—É–º–º–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 150\\.000$*' + "\n \n" +
                '1\\) –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª' + "\n \n" +
                '2\\) –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–∞–π–¥–∏ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª' + "\n \n" +
                '3\\) –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏ –≤—Å—Ç–∞–≤—å –≤ –±–æ—Ç–∞' + "\n \n" +
                '4\\) –ì–æ—Ç–æ–≤–æ\\! –±–æ—Ç –≤—ã—à–ª–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ',
                parse_mode: 'MarkdownV2',
            })

            await ctx.editMessageReplyMarkup({
                inline_keyboard: this.servicesButtons(),
            })
        })
    }
}