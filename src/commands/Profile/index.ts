import { format, addYears } from 'date-fns'
import { Command } from '../Command'
import { type Bot } from '../../app'
import { escape } from '../../helpers'
import { Markup } from 'telegraf'

export class Profile extends Command {
  constructor (bot: Bot) {
    super(bot)
  }

  handle (): void {
    // –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç
    this.bot.bot.hears('üëæ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç', async (ctx) => {
      this.bot.logger.logAction('–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç', ctx.from)

      try {
        await ctx.deleteMessage()

        const {
          savedMoney,
          requestsCount,
          planDate,
          plan
        } = await this.bot.api.getProfile(String(ctx.update.message.from.id))

        const isPaid = plan === 'pro'

        if (!isPaid) {
          await ctx.reply('‚ÜòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', Markup.keyboard([
            ['üì• –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª'],
            ['üíé –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø'],
            ['üîê –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ']
          ]).resize())
        }

        const formattedStartDate = planDate ? format(new Date(planDate), 'dd-MM-yyyy') : ''
        const formattedEndDate = planDate ? format(addYears(new Date(planDate), 1), 'dd-MM-yyyy') : ''

        await ctx.replyWithPhoto(
          'https://i.ibb.co/pKB8GyK/15.png',
          {
            caption: '*üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ DesignBot*' + '\n\n' +
            `üîã –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: ${isPaid ? escape(formattedStartDate) : '–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'}` + '\n' +
            `‚è≥ –ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: ${isPaid ? escape(formattedEndDate) : '–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'}` + '\n\n' +
            'üîé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:' + '\n' +
            `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: *${requestsCount}*` + '\n' +
            `–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —Å DesignBot: *${savedMoney}$*`,
            parse_mode: 'MarkdownV2'
          }
        )
      } catch (e) {
        this.bot.logger.log(`error in my account: ${e}`, 'error')
      }
    })
  }
}
