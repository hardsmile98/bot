import { type Context, Markup } from 'telegraf'
import { Command } from '../Command'
import { type Bot } from '../../app'
import { escape } from '../../helpers'

export class Pay extends Command {
  constructor (bot: Bot) {
    super(bot)
  }

  async sendPayUrl (ctx: Context, userId: string, url: string, uuid: string) {
    const message = await ctx.replyWithPhoto(
      'https://i.ibb.co/XDQ1pPC/14.png',
      {
        caption: '*üëæ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø*' + '\n \n' +
            'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *–≤—Å–µ–≥–æ \\- 3500 ‚ÇΩ –≤ –≥–æ–¥*' + '\n \n' +
            '–°—Ä–µ–¥—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ò–ò, –≥–∏–ø–æ—Ç–µ–∑ –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞' + '\n \n' +
            '–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:' + '\n' +
            '\‚Äî –ü–æ–ª–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ \\(–ö–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞\\)' + '\n' +
            '\‚Äî –ì–æ–¥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É' + '\n' +
            '\‚Äî –î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± —Ç–æ–ø –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤' + '\n\n' +
            '\\* –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"*',
        parse_mode: 'MarkdownV2',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å - 3500 ‚ÇΩ', url)],
          [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'check_pay')]
        ])
      }
    )
    await this.bot.api.savePayment(uuid, userId, String(message.message_id))
  }

  handle (): void {
    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
    this.bot.bot.hears('üíé –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø', async (ctx) => {
      this.bot.logger.logAction('–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø', ctx.from)

      try {
        const responsePaid = await this.bot.api?.getProfile(String(ctx.update.message.from.id))

        await ctx.deleteMessage()

        if (responsePaid.plan === 'pro') {
          await ctx.replyWithPhoto(
            'https://i.ibb.co/zmZHNYM/16.png',
            {
              caption: '*üéâ –£ –≤–∞—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø*' + '\n \n' +
                '–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ —Ç—ã –∑–∞–ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—à—å –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
              parse_mode: 'MarkdownV2'
            }
          )

          return
        }
      } catch (e) {
        this.bot.logger.log(`error in pay (chekPlan): ${e}`, 'error')
        return
      }

      try {
        const payments = await this.bot.api.createPayment(
          String(ctx.update.message.from.id)
        )

        await this.sendPayUrl(
          ctx,
          String(ctx.update.message.from.id),
          payments.confirmation.confirmation_url,
          payments.id
        )
      } catch (e) {
        this.bot.logger.log(`error in pay (createPayment): ${e}`, 'error')
      }
    })

    this.bot.bot.action('go_to_pay', async ctx => {
      this.bot.logger.logAction('–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ–ø–ª–∞—Ç—É', ctx.from)

      try {
        const payments = await this.bot.api.createPayment(
          String(ctx.update.callback_query.from.id)
        )

        await this.sendPayUrl(
          ctx,
          String(ctx.update.callback_query.from.id),
          payments.confirmation.confirmation_url,
          payments.id
        )
      } catch (e) {
        this.bot.logger.log(`error in go to pay: ${e}`, 'error')
      }
    })

    this.bot.bot.action('check_pay', async ctx => {
      this.bot.logger.logAction('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', ctx.from)

      try {
        const { isPaid, confirmationUrl } = await this.bot.api.checkPayment(
          String(ctx.update.callback_query.from.id),
          String(ctx.update.callback_query.message?.message_id)
        )

        if (isPaid) {
          await ctx.editMessageMedia({
            media: 'https://i.ibb.co/zmZHNYM/16.png',
            type: 'photo',
            caption: '*üéâ –£ –≤–∞—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø*' + '\n \n' +
                '–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ —Ç—ã –∑–∞–ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—à—å –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
            parse_mode: 'MarkdownV2'
          })
        } else {
          await ctx.editMessageMedia({
            media: 'https://i.ibb.co/NL38Bm4/17.png',
            type: 'photo',
            caption: '*‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏*' + '\n \n' +
                `–ü–æ–ø—Ä–æ–±—É–π –æ–ø–ª–∞—Ç–∏—Ç—å [–∑–∞–Ω–æ–≤–æ](${escape(confirmationUrl)})` + '\n \n' +
                '–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Ç–µ—Ö\\.–ø–æ–¥–¥–µ—Ä–∂–∫—É @toqmen',
            parse_mode: 'MarkdownV2'
          })

          await ctx.editMessageReplyMarkup({
            inline_keyboard: [[
              Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'check_pay')
            ]]
          })
        }
      } catch (e) {
        this.bot.logger.log(`error in check pay: ${e}`, 'error')
      }
    })
  }
}
